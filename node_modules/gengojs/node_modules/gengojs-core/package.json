{
  "name": "gengojs-core",
  "version": "0.3.18",
  "description": "The core of gengo.js that manages i18n and l10n.",
  "main": "src/index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gengojs/core.git"
  },
  "keywords": [
    "i18n",
    "gengojs",
    "l10n",
    "internationalization",
    "localization",
    "translate",
    "plugin",
    "plugins"
  ],
  "author": {
    "name": "iwatakeshi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gengojs/core/issues"
  },
  "homepage": "https://github.com/gengojs/core",
  "dependencies": {
    "gengojs-core-modules": "^2.1.2",
    "gengojs-debug": "^2.0.4",
    "js-yaml": "^3.4.2",
    "lodash": "^3.10.1"
  },
  "devDependencies": {
    "chai": "^3.3.0",
    "gulp": "^3.9.0",
    "gulp-babel": "^5.2.1",
    "gulp-changelog": "^1.0.0",
    "gulp-gh-pages": "^0.5.2",
    "gulp-jsbeautify": "^0.1.1",
    "gulp-jshint": "^1.11.2",
    "gulp-mocha": "^2.1.3",
    "gulp-shell": "^0.5.0",
    "gulp-sourcemaps": "^1.6.0",
    "jshint-stylish": "^2.0.1",
    "mocha": "^2.3.3",
    "mr-doc": "git+https://github.com/mr-doc/mr-doc.git",
    "mr-doc-theme-cayman": "git+https://github.com/mr-doc/mr-doc-theme-cayman.git",
    "rimraf": "^2.4.3"
  },
  "readme": "# gengo.js/core\n\n[![Join the chat at https://gitter.im/iwatakeshi/gengojs-core](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/iwatakeshi/gengojs-core?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/gengojs/core.svg?branch=master)](https://travis-ci.org/gengojs/core)\n[![Dependency Status](https://david-dm.org/gengojs/core.svg)](https://github.com/iwatakeshi/gengojs-core/blob/master/package.json) [![License Status](http://img.shields.io/npm/l/gengojs-core.svg)](https://github.com/iwatakeshi/gengojs-core/blob/master/LICENSE) [![Downloads](http://img.shields.io/npm/dm/gengojs-core.svg)](https://nodei.co/npm/gengojs-core/)\n[![Version](http://img.shields.io/npm/v/gengojs-core.svg)](https://nodei.co/npm/gengojs-core/)\n\nThe core of gengo.js that manages i18n and l10n.\n\n## Documentation\n\nSee [documentation](https://gengojs.github.io/core/).\n\n\n## Status\n\n**10/8/15**\n\nAnother release!? Yup and it's going fast. **1.0.0-alpha.2** has already been released but expect more alphas to\nbe released within this month. Also, I have released `sails-hook-gengojs` on npm which will allow you to use\ngengo.js in your Sails app as if it was built into Sails in the first place. In future releases expect gengo.js to move from\nalpha -> beta -> rc (release candidate). I will also be working on gengojs.com so expect that to happen soon as well! Well, happy coding!\n\n10/6/15\n\nGreetings! As promised, I have added documentation to the core and to the plugins. It should be\nself explanatory but if there is something that needs clarification then feel free to create an issue\nabout it.\nAs far as gengo.js is concernced, expect **1.0.0-alpha.2** to be released within this week or next (hopefully soon).\nI'll also be creating an example app with Sails so that it will show how gengo.js works. I do plan to create a sails hook\nthat will replace the default i18n of sails so be watching! **;)** In the mean time, please checkout the documentations\nof the plugins. Anyways, happy coding!\n\n09/24/15: \n\nHey! First of all, apologies for any delays in gengo.js. I've been working on another project\ncalled [Mr Doc](https://www.github.com/mr-doc/mr-doc). It's a tool that generates beautiful docs and I've\nimproved it because I really needed a better way to document my source. So I hope to go through\neverything as I document them well. Some changes did occur as I was working on Mr. Doc. I've decided to\nmove all gengo.js related projects from my personal Github account to a dedicated [account](https://github.com/gengojs).\nThere, you will find everthing you need to work on gengo and contribute. Finally, I did generate\nthe docs for the core so see [Documentation](https://gengojs.github.io/core/). Well, that's all for now! Happy coding!\n\n\n~~As of 8/29/15, I've decided to go through the core and the plugins and refine them so that it will\nbe easier to create the docs and hopefully easier to understand how to create plugins.~~\n\n~~Some from the docs below may still work as far as exporting plugins but the idea of internal API\nstill needs some refinement.~~\n\n## Introduction\n\n**gengojs-core** is the actual core of [gengo.js](https://github.com/gengojs/gengojs). It serves to be\na server agnostic middle-ware supporting the popular servers such as Express,\nKoa, Hapi, and even more with ease. It is also modular-tastic, and easy\nto debug with less than 40 lines of source code according to [sloc](https://www.npmjs.com/package/sloc).\n\nTo get started, there are three things to know about how the core works:\n\n* Initialize\n* Ship\n* Parse\n\n**Initialize** is the starting point of the core. It handles the initialization of the\nplugin's stack, options, and also the back-end. The reason the back-end is initialized first is\nbecause of the possible use of asynchronous programming needs. Note that if you are to\ncreate a plugin for the back-end, you will need to load every locale into memory so that\nthe parser can readily use the data.\n\n**Ship** is a function that applies the API to requests and also to the view.\nIt begins by getting the locale from the client, letting the router know about\nthe current URL path, applying the locale to the localization plugin, and finally\nassigning the API such as `__` or `__l` (can be changed) to the objects\nthat are provided by the request and response..\n\n**Parse** is the final step in the core. It is called only when the API such as\n`__('Hello')` are used. In this step, the parser plugin must return the i18ned string.\n\n**So...** you may be wondering why is the core a separate module from the rest? The reason is\nbecause having the core on its own allows you, developers, to create awesome plugins. I personally\nfeel as if i18n modules are **a bit limited** in what it can do and myself as well.\n\nAnyways, one thing to note is that this module *should not be used on its own*. The actual i18n library is\n[gengo.js](https://github.com/gengojs/gengojs). If you want to extend the core to support\nserver x, then here is where you want to do that but if you want to create the wrapper for server x,\nthen [gengo.js](https://github.com/gengojs/gengojs) is where you would do that.\n\n## Getting Started\n\n**How gengo.js works** is similar to how Hapi works in terms of creating plugins and how Grunt works\nin terms of options.\n\nTo create plugins, the one thing to keep in mind is core's `this` context. When a plugin is initialized,\nthe core calls the plugin as it binds its context to that plugin (see **Creating Plugins**). Another thing to keep in mind is *dependency*. Dependencies are really\ninternal API. For example, the parser plugin needs to know about the data. Therefore it is dependent on the\nback-end plugin and is expecting the back-end to supply an internal API to retrieve the locale/data. To see how dependencies work,\ncheckout the default plugins. Each plugin show the dependencies and the exposed internal api and also have their own documentation.\n\n* [gengojs-default-api](https://github.com/gengojs/plugin-api)\n* [gengojs-default-backend](https://github.com/gengojs/plugin-backend)\n* [gengojs-default-header](https://github.com/gengojs/plugin-header)\n* [gengojs-default-localize](https://github.com/gengojs/plugin-localize)\n* [gengojs-default-parser](https://github.com/gengojs/plugin-parser)\n* [gengojs-default-router](https://github.com/gengojs/plugin-router)\n\n\n## Creating Plugins\n\n**Creating plugins** is quite similar, if not, the same as creating plugins for Hapi. As mentioned above,\nthe core is really all about context. The following shows you the recommended way to create your plugins:\n\nFor this example we will create a dummy header plugin:\n\n### ES5\n\n```javascript\nfunction MyHeaderClass (options){\n\n   this.getLocale = function(){\n    // ...\n   }\n}\n```\n\n### ES6\n\n```javascript\nclass MyHeaderClass {\n  constructor (options){\n    // ...\n  }\n  \n  getLocale(){\n    // ...\n  }\n}\n```\n\n## Exporting Plugins\n\nNow we will export our dummy header plugin. Our plugin must specify a type which we know it's a header but here are the available types:\n* parser\n* header\n* api\n* localize\n* backend\n* router\n\nIn this example, I will use [Lodash](https://lodash.com/) to merge the type of plugin\nwith the package. \n\nOur plugin must also have defaults provided. \n\n```javascript\nmodule.exports = function ship() {\n var pkg = require('./package');\n  return {\n    main: function ship(){\n      // Pass options and expose internal API\n      this.header = new MyHeaderClass(this.options.header);\n    },\n    package: _.merge({\n      type: 'header'\n    }, require('../package')),,\n    // Provide option defaults\n    defaults: require('./defaults.json')\n  };\n};\n```\n\n\n**Notes**:\n\n* You may have noticed that defaults are provided in the example. Defaults are required (See **Options**). If you\ndo not have any defaults, then you can just pass `{}`, and the core will not complain.\n\n* Keep in mind that you are limited to one plugin per type. This was done to prevent problems that may arise\nwhen dealing with the core's context.\n\n## Exporting Multiple Plugins\n\nNow you may be wondering, *Can I release a set of plugins?* The answer is\n**YES!**. I call these sets, *packs* or *gengo-pack*. To create a pack, simply export the individual\n*ships* like the following:\n\n```javascript\nmodule.exports = function(){\n  return {\n    parser: /*parser ship*/,\n    router: /*router ship*/,\n    backend: /*backend ship*/,\n    api: /*api ship*/,\n    header: /*header ship*/,\n    localize: /*localize ship*/\n  }\n};\n```\n\n## Testing your plugins\n\nTo test your plugins, simply install the core and also the default plugins needed for your plugin. The simplest way to require all the default plugins is by installing `gengojs-default-pack` which\ncontains all the default plugins. Since the pack is an object, you\ncan simply use it like so:\n\n```javascript\nvar pack = require('gengojs-default-pack');\n\n// Use only what you need\nvar header = pack.header;\nvar backend = pack.backend;\n// or you can just replace the plugin:\npack.backend = myBackendPlugin;\n\n// Then use the core for tests\n\nvar core = require('gengojs-core');\n\nvar gengo = core({}, pack);\n\n// Test for your plugins existence:\n\nif(!_.isUndefined(gengo.plugins.backend))\n// ...\n```\n\n## Options\n\nThe core doesn't have the best option system but the official way to access options per plugin is\nby the context as in the example:\n\n```javascript\nfunction ship(){\n  // To access the options,\n  // simply use: this.options[type]:\n  console.log(this.options.parser);\n}\n```\nIn general, you can access any other plugin's options through the same syntax as in the example, but\nmake sure to provide the defaults when you create your plugins. The core will apply them to the options\nas soon as it loads the plugin.\n\n## Contributing\n\nFeel free to contribute. To contribute, see the requirements. If you have any suggestions,\ncreate issues at the core's [GitHub Issues](https://github.com/gengojs/core). Also,\nall ES6 modules are located under `lib/`.\n\n* Requirements\n\t* Gulp\n\t* [Airbnb Javascript Style](https://github.com/airbnb/javascript)\n\t* [semver versioning](http://semver.org/)\n\t* Fork and Pull\n\t* Your skills\n\n## Debug\n\nThe core uses [gengojs-debug](https://github.com/gengojs/debug), \nan extension of [debug](https://github.com/visionmedia/debug), to output debugging statements. \nTo debug, simply set the type of debug in the shell:\n\nUnix:\n\n```bash\n$ DEBUG=gengo.core:*\n```\n\nWindows\n\n```bash\n$ SET DEBUG=gengo.core:*\n```\n\nThe levels used in the core are:\n\n* debug\n* error\n* info\n\n## Develop\n\n```bash\n# Build modules with gulp for development\ngulp\n```\n\n## Test\n\n```bash\n# Build modules with gulp for production\ngulp test\n```\n\n## Changelog\n\nSee [changelog](https://github.com/gengojs/core/blob/master/CHANGELOG.md).",
  "readmeFilename": "README.md",
  "gitHead": "a45b1cc7346662201ac8b415213cb33a42f5024e",
  "_id": "gengojs-core@0.3.18",
  "_shasum": "6836661cef6c354cc9038661d5b50b8b100f247c",
  "_from": "gengojs-core@>=0.3.18 <0.4.0"
}

{"version":3,"sources":["../../src/globwatcher/filewatcher.js"],"names":[],"mappings":"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","file":"src/globwatcher/filewatcher.js","sourcesContent":["let events = require(\"events\");\nlet fs = require(\"fs\");\nlet path = require(\"path\");\nlet Promise = require(\"bluebird\");\nlet util = require(\"util\");\n\nclass FileWatcher {\n  constructor(options_in = {}) {\n    let options = {\n      period: 250,\n      persistent: true\n    };\n    for (let key in options_in) options[key] = options_in[key];\n    // frequency of stat() checking, in milliseconds\n    this.period = options.period;\n    // should our timer keep the process alive?\n    this.persistent = options.persistent;\n    // timer that periodically checks for file changes\n    this.timer = null;\n    // filename -> Watch\n    this.watches = {};\n    // chain of running checks\n    this.ongoing = null;\n  }\n\n  close() {\n    this.watches = {};\n    if (this.timer != null) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n\n  watch(filename, mtime = null, size = null) {\n    filename = path.resolve(filename);\n    let watch = this.watches[filename];\n    if (watch == null) {\n      watch = this.watches[filename] = new Watch(filename, mtime, size);\n    }\n    if (this.timer == null) {\n      this.timer = setInterval(() => this.check(), this.period);\n      if (!this.persistent) this.timer.unref();\n    }\n    return watch;\n  }\n\n  unwatch(filename) {\n    filename = path.resolve(filename);\n    delete this.watches[filename];\n  }\n\n  watchFor(filename) {\n    return this.watches[path.resolve(filename)];\n  }\n\n  // runs a scan of all outstanding watches.\n  // if a scan is currently running, the new scan is queued up behind it.\n  // returns a promise that will be fulfilled when this new scan is finished.\n  check() {\n    this.ongoing = (this.ongoing || Promise.resolve()).then(() => {\n      let watches = Object.keys(this.watches).map((key) => this.watches[key]);\n      let completion = Promise.all(watches.map((watch) => watch.check()));\n      this.ongoing = completion.then(() => {\n        this.ongoing = null;\n      });\n      return this.ongoing;\n    });\n    return this.ongoing;\n  }\n}\n\nclass Watch extends events.EventEmitter {\n  constructor(filename, mtime, size) {\n    this.filename = filename;\n    this.mtime = mtime;\n    this.size = size;\n\n    this.callbacks = [];\n    if (this.mtime == null || this.size == null) {\n      try {\n        let stat = fs.statSync(this.filename);\n        this.mtime = stat.mtime.getTime();\n        this.size = stat.size;\n      } catch (error) {\n        // nevermind.\n      }\n    }\n  }\n\n  check() {\n    return Promise.promisify(fs.stat)(this.filename).catch((error) => null).then((stat) => {\n      if (this.mtime != null && stat != null && (this.mtime != stat.mtime.getTime() || this.size != stat.size)) {\n        this.emit(\"changed\", stat);\n      }\n      if (stat != null) {\n        this.mtime = stat.mtime.getTime();\n        this.size = stat.size;\n      } else {\n        this.mtime = null;\n        this.size = null;\n      }\n    });\n  }\n}\n\n\nexports.FileWatcher = FileWatcher;\n"]}
{"version":3,"sources":["../../src/globwatcher/globwatcher.js"],"names":[],"mappings":"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","file":"src/globwatcher/globwatcher.js","sourcesContent":["let events = require(\"events\");\nlet fs = require(\"fs\");\nlet glob = require(\"glob\");\nlet minimatch = require(\"minimatch\");\nlet path = require(\"path\");\nlet Promise = require(\"bluebird\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\n\nglob = Promise.promisify(glob);\nlet readdir = Promise.promisify(fs.readdir);\nlet FileWatcher = require(\"./filewatcher\").FileWatcher;\n\n// FIXME this should probably be in a minimatch wrapper class\nfunction folderMatchesMinimatchPrefix(folderSegments, minimatchSet) {\n  for (let i = 0; i < folderSegments.length; i++) {\n    let segment = folderSegments[i];\n    let miniSegment = minimatchSet[i];\n    if (miniSegment == minimatch.GLOBSTAR) return true;\n    if (typeof miniSegment == \"string\") {\n      if (miniSegment != segment) return false;\n    } else {\n      if (!miniSegment.test(segment)) return false;\n    }\n  }\n  return true;\n}\n\nexports.folderMatchesMinimatchPrefix = folderMatchesMinimatchPrefix;\n\n\n// sometimes helpful for my own debugging.\nfunction debugWithTimestamp(message) {\n  const now = Date.now()\n  const timestamp = new Date(now).toString().slice(16, 24) + \".\" + (1000 + now % 1000).toString().slice(1)\n  console.log(timestamp + \": \" + message);\n}\n\nexports.debugWithTimestamp = debugWithTimestamp;\n\n\n// map (absolute) folder names, which are being folder-level watched, to a\n// set of (absolute) filenames in that folder that are being file-level\n// watched.\nclass WatchMap {\n  constructor() {\n    // map: folderName -> (filename -> true)\n    this.map = {};\n  }\n\n  clear() {\n    this.map = {};\n  }\n\n  watchFolder(folderName) {\n    if (this.map[folderName] == undefined) this.map[folderName] = {};\n  }\n\n  unwatchFolder(folderName) {\n    delete this.map[folderName];\n  }\n\n  watchFile(filename, parent) {\n    if (this.map[parent] == undefined) this.map[parent] = {};\n    this.map[parent][filename] = true;\n  }\n\n  unwatchFile(filename, parent) {\n    delete this.map[parent][filename];\n  }\n\n  getFolders() {\n    return Object.keys(this.map);\n  }\n\n  getFilenames(folderName) {\n    return Object.keys(this.map[folderName] || {});\n  } \n\n  getAllFilenames() {\n    let rv = [];\n    this.getFolders().forEach((folder) => {\n      rv = rv.concat(this.getFilenames(folder));\n    });\n    return rv;\n  }\n\n  getNestedFolders(folderName) {\n    return this.getFolders().filter((f) => f.slice(0, folderName.length) == folderName);\n  }\n\n  watchingFolder(folderName) {\n    return this.map[folderName] != undefined;\n  }\n\n  watchingFile(filename, parent) {\n    if (parent == null) parent = path.dirname(filename);\n    return this.map[parent] != null && this.map[parent][filename] != null;\n  }\n\n  toDebug() {\n    let out = [];\n    Object.keys(this.map).sort().forEach((folder) => {\n      out.push(folder);\n      Object.keys(this.map[folder]).sort().forEach((filename) => out.push(`  '- ${filename}`));\n    });\n    return out.join(\"\\n\") + \"\\n\";\n  }\n}\n\n\nfunction globwatcher(pattern, options) {\n  return new GlobWatcher(pattern, options);\n}\n\nexports.globwatcher = globwatcher;\n\n\nclass GlobWatcher extends events.EventEmitter {\n  constructor(patterns, options = {}) {\n    this.closed = false;\n    this.cwd = options.cwd || process.cwd();\n    this.debounceInterval = options.debounceInterval || 10;\n    this.interval = options.interval || 250;\n    this.debug = options.debug || (() => null);\n    if (this.debug === true) this.debug = debugWithTimestamp;\n    this.persistent = options.persistent || false;\n    this.emitFolders = options.emitFolders || false;\n    this.watchMap = new WatchMap();\n    this.fileWatcher = new FileWatcher(options);\n    // map of (absolute) folderName -> FSWatcher\n    this.watchers = {};\n    // (ordered) list of glob patterns to watch\n    this.patterns = [];\n    // minimatch sets for our patterns\n    this.minimatchSets = [];\n    // set of folder watch events to check on after the debounce interval\n    this.checkQueue = {};\n    if (typeof patterns == \"string\") patterns = [ patterns ];\n    this.originalPatterns = patterns;\n    if (options.snapshot) {\n      this.restoreFrom(options.snapshot, patterns);\n    } else {\n      this.add(...patterns);\n    }\n  }\n\n  add(...patterns) {\n    this.debug(`add: ${util.inspect(patterns)}`);\n    this.originalPatterns = this.originalPatterns.concat(patterns);\n    this.addPatterns(patterns);\n    this.ready = Promise.all(this.patterns.map((p) => {\n      return glob(p, { nonegate: true }).then((files) => {\n        files.forEach((filename) => this.addWatch(filename));\n      });\n    })).then(() => {\n      this.stopWatches();\n      this.startWatches();\n      // give a little delay to wait for things to calm down\n      return Promise.delay(this.debounceInterval);\n    }).then(() => {\n      this.debug(`add complete: ${util.inspect(patterns)}`);\n      return this;\n    });\n  }\n\n  close() {\n    this.debug(\"close\");\n    this.stopWatches();\n    this.watchMap.clear();\n    this.fileWatcher.close();\n    this.closed = true;\n    this.debug(\"/close\");\n  }\n\n  // scan every covered folder again to see if there were any changes.\n  check() {\n    this.debug(\"-> check\");\n    let folders = Object.keys(this.watchers).map((folderName) => this.folderChanged(folderName));\n    return Promise.all([ this.fileWatcher.check() ].concat(folders)).then(() => {\n      this.debug(\"<- check\");\n    });\n  }\n\n  // what files exist *right now* that match the watches?\n  currentSet() {\n    return this.watchMap.getAllFilenames();\n  }\n\n  // filename -> { mtime size }\n  snapshot() {\n    let state = {};\n    this.watchMap.getAllFilenames().forEach((filename) => {\n      let w = this.fileWatcher.watchFor(filename);\n      if (w) state[filename] = { mtime: w.mtime, size: w.size };\n    });\n    return state;\n  }\n\n\n  // ----- internals:\n\n  // restore from a { filename -> { mtime size } } snapshot.\n  restoreFrom(state, patterns) {\n    this.addPatterns(patterns);\n    Object.keys(state).forEach((filename) => {\n      let folderName = path.dirname(filename);\n      if (folderName != \"/\") folderName += \"/\";\n      this.watchMap.watchFile(filename, folderName);\n    });\n    // now, start watches.\n    this.watchMap.getFolders().forEach((folderName) => {\n      this.watchFolder(folderName);\n    });\n    Object.keys(state).forEach((filename) => {\n      this.watchFile(filename, state[filename].mtime, state[filename].size);\n    });\n    // give a little delay to wait for things to calm down.\n    this.ready = Promise.delay(this.debounceInterval).then(() => {\n      this.debug(`restore complete: ${util.inspect(patterns)}`);\n      return this.check();\n    }).then(() => this);\n  }\n\n  addPatterns(patterns) {\n    patterns.forEach((p) => {\n      p = this.absolutePath(p);\n      if (this.patterns.indexOf(p) < 0) this.patterns.push(p);\n    });\n\n    this.minimatchSets = [];\n    this.patterns.forEach((p) => {\n      this.minimatchSets = this.minimatchSets.concat(new minimatch.Minimatch(p, { nonegate: true }).set);\n    });\n\n    this.minimatchSets.forEach((set) => this.watchPrefix(set));\n  }\n\n  // make sure we are watching at least the non-glob prefix of this pattern,\n  // in case the pattern represents a folder that doesn't exist yet.\n  watchPrefix(minimatchSet) {\n    let index = 0;\n    while (index < minimatchSet.length && typeof minimatchSet[index] == \"string\") index += 1;\n    if (index == minimatchSet.length) index -= 1;\n    let prefix = path.join(\"/\", ...minimatchSet.slice(0, index));\n    let parent = path.dirname(prefix);\n    // if the prefix doesn't exist, backtrack within reason (don't watch \"/\").\n    while (!fs.existsSync(prefix) && parent != path.dirname(parent)) {\n      prefix = path.dirname(prefix);\n      parent = path.dirname(parent);\n    }\n    if (fs.existsSync(prefix)) {\n      if (prefix[prefix.length - 1] != \"/\") prefix += \"/\";\n      this.watchMap.watchFolder(prefix);\n    }\n  }\n\n  absolutePath(p) {\n    return p[0] == '/' ? p : path.join(this.cwd, p);\n  }\n\n  isMatch(filename) {\n    return _.any(this.patterns, (p) => minimatch(filename, p, { nonegate: true }));\n  }\n\n  addWatch(filename) {\n    let isdir = false;\n    try {\n      isdir = fs.statSync(filename).isDirectory();\n    } catch (error) {\n      // don't worry about it.\n    }\n    if (isdir) {\n      // watch whole folder\n      filename += \"/\";\n      this.watchMap.watchFolder(filename);\n    } else {\n      let parent = path.dirname(filename);\n      if (parent != \"/\") parent += \"/\";\n      this.watchMap.watchFile(filename, parent);\n    }\n  }\n\n  stopWatches() {\n    _.forIn(this.watchers, (watcher, x) => {\n      watcher.close();\n    });\n    this.watchMap.getFolders().forEach((folderName) => {\n      this.watchMap.getFilenames(folderName).forEach((filename) => this.fileWatcher.unwatch(filename));\n    });\n    this.watchers = {};\n    this.closed = true;\n  }\n\n  startWatches() {\n    this.watchMap.getFolders().forEach((folderName) => {\n      this.watchFolder(folderName);\n      this.watchMap.getFilenames(folderName).forEach((filename) => {\n        if (filename[filename.length - 1] != \"/\") this.watchFile(filename);\n      });\n    });\n    this.closed = false;\n  }\n\n  watchFolder(folderName) {\n    this.debug(`watch: ${folderName}`);\n    try {\n      this.watchers[folderName] = fs.watch(folderName, { persistent: this.persistent, recursive: false }, (event) => {\n        this.debug(`watch event: ${folderName}`);\n        this.checkQueue[folderName] = true;\n        // wait a short interval to make sure the new folder has some staying power.\n        setTimeout(() => this.scanQueue(), this.debounceInterval);\n      });\n    } catch (error) {\n      // never mind.\n    }\n  }\n\n  scanQueue() {\n    let folders = Object.keys(this.checkQueue);\n    this.checkQueue = {};\n    folders.forEach((f) => this.folderChanged(f));\n  }\n\n  watchFile(filename, mtime = null, size = null) {\n    this.debug(`watchFile: ${filename}`);\n    // FIXME @persistent @interval\n    this.fileWatcher.watch(filename, mtime, size).on(\"changed\", () => {\n      this.debug(`watchFile event: ${filename}`);\n      this.emit(\"changed\", filename);\n    });\n  }\n\n  folderChanged(folderName) {\n    // keep a scoreboard so we can avoid calling readdir() on a folder while\n    // we're literally in the middle of a readdir() on that folder already.\n    if (!this.folderChangedScoreboard) this.folderChangedScoreboard = {};\n    if (this.folderChangedScoreboard[folderName]) return Promise.resolve();\n    this.folderChangedScoreboard[folderName] = true;\n\n    this.debug(`-> check folder: ${folderName}`);\n    if (this.closed) {\n      this.debug(\"<- check n/m, closed\");\n      return Promise.resolve();\n    }\n    return readdir(folderName).catch((error) => {\n      delete this.folderChangedScoreboard[folderName];\n      if (this.emitFolders) this.emit(\"deleted\", folderName);\n      this.debug(`   ERR: ${error}`);\n      return [];\n    }).then((current) => {\n      delete this.folderChangedScoreboard[folderName];\n      if (this.closed) {\n        this.debug(\"<- check n/m, closed\");\n        return Promise.resolve();\n      }\n\n      // add \"/\" to folders\n      current = current.map((filename) => {\n        filename = path.join(folderName, filename);\n        try {\n          if (fs.statSync(filename).isDirectory()) filename += \"/\";\n        } catch (error) {\n          // file vanished before we could stat it!\n        }\n        return filename;\n      });\n      let previous = this.watchMap.getFilenames(folderName);\n      if (previous.length == 0 && this.emitFolders) this.emit(\"added\", folderName);\n\n      // deleted files/folders\n      previous.filter((x) => current.indexOf(x) < 0).map((f) => {\n        f[f.length - 1] == '/' ? this.folderDeleted(f) : this.fileDeleted(f);\n      });\n\n      // new files/folders\n      return Promise.all(current.filter((x) => previous.indexOf(x) < 0).map((f) => {\n        return f[f.length - 1] == '/' ? this.folderAdded(f) : this.fileAdded(f, folderName);\n      }));\n    }).then(() => {\n      this.debug(`<- check folder: ${folderName}`);\n    });\n  }\n\n  fileDeleted(filename) {\n    this.debug(`file deleted: ${filename}`);\n    let parent = path.dirname(filename);\n    if (parent != \"/\") parent += \"/\";\n    if (this.watchMap.watchingFile(filename, parent)) {\n      fs.unwatchFile(filename);\n      this.watchMap.unwatchFile(filename, parent);\n    }\n    this.emit(\"deleted\", filename);\n  }\n\n  folderDeleted(folderName) {\n    // this is trouble, bartman-style, because it may be the only indication\n    // we get that an entire subtree is gone. recurse through them, marking\n    // everything as dead.\n    this.debug(`folder deleted: ${folderName}`);\n    // getNestedFolders() also includes this folder (folderName).\n    this.watchMap.getNestedFolders(folderName).forEach((folder) => {\n      this.watchMap.getFilenames(folder).forEach((filename) => this.fileDeleted(filename));\n      if (this.watchers[folder]) {\n        this.watchers[folder].close();\n        delete this.watchers[folder];\n      }\n      this.watchMap.unwatchFolder(folder);\n    });\n  }\n\n  fileAdded(filename, folderName) {\n    if (!this.isMatch(filename)) return Promise.resolve();\n    this.debug(`file added: ${filename}`);\n    this.watchMap.watchFile(filename, folderName);\n    this.watchFile(filename);\n    this.emit(\"added\", filename);\n    return Promise.resolve();\n  }\n\n  folderAdded(folderName) {\n    // if it potentially matches the prefix of a glob we're watching, start\n    // watching it, and recursively check for new files.\n    if (!this.folderIsInteresting(folderName)) return Promise.resolve();\n    this.debug(`folder added: ${folderName}`);\n    this.watchMap.watchFolder(folderName);\n    this.watchFolder(folderName);\n    return this.folderChanged(folderName);\n  }\n\n  // does this folder match the prefix for an existing watch-pattern?\n  folderIsInteresting(folderName) {\n    let folderSegments = folderName.split(\"/\");\n    folderSegments = folderSegments.slice(0, folderSegments.length - 1);\n    return _.any(this.minimatchSets, (set) => folderMatchesMinimatchPrefix(folderSegments, set));\n  }\n}\n"]}
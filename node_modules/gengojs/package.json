{
  "name": "gengojs",
  "version": "0.3.32",
  "description": "An uber basic and simple i18n library for Express 4",
  "main": "gengo.js",
  "scripts": {
    "test": "mocha ./tests/*.js",
    "cookies": "mocha ./tests/cookies.js",
    "functions": "mocha ./tests/functions.js",
    "routes": "mocha ./tests/routes.js",
    "libs": "mocha ./tests/libs.js",
    "json": "mocha ./tests/json.js",
    "api": "mocha ./tests/api.js",
    "factory": "node ./scripts/locale.js"
  },
  "dependencies": {
    "app-root-path": "^0.1.0",
    "colors": "^0.6.2",
    "kawari": "0.0.1",
    "locale": "0.0.20",
    "moment": "^2.8.3",
    "mustache": "^0.8.2",
    "numeral": "^1.5.3",
    "sprintf-js": "0.0.7",
    "underscore": "^1.7.0",
    "xml2js": "^0.4.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/iwatakeshi/gengojs.git"
  },
  "keywords": [
    "i18n",
    "translate",
    "gengo",
    "international",
    "express"
  ],
  "author": {
    "name": "iwatakeshi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/iwatakeshi/gengojs/issues"
  },
  "homepage": "http://gengojs.com",
  "devDependencies": {
    "assert": "^1.1.2",
    "cookie-parser": "^1.3.3",
    "express": "^4.9.4",
    "mocha": "^1.21.4",
    "prompt": "^0.2.14",
    "shelljs": "^0.3.0",
    "supertest": "^0.13.0"
  },
  "readme": "Gengo.js\n========\n[![NPM](https://nodei.co/npm/gengojs.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/gengojs/)\n\nVisit [Gengojs.com](http://www.gengojs.com) for installation, configuration, and documentation.\nAlso, feel free to fork gengo and the site to add more languages and locale support!\n\n\nIf you would like to see more examples other than the ones on gengojs.com then check out the tests there's 127 possible ways to gengo!\n\n###Tests\n```bash\n#run all\nnpm test\n\n#run functions\nnpm run functions\n\n#run cookies\nnpm run cookies\n\n#run json\nnpm run json\n\n#run libs\nnpm run libs\n\n#run routes\nnpm run routes\n\n#run api\nnpm run api\n\n```\n\n###Basic locale creator\n```bash\n#run factory\nnpm run factory\n```\n\n##Acknowledgements\ngengo was made possible by:\n\n* [locale](https://github.com/jed/locale)\n* [App Root Path](https://github.com/inxilpro/node-app-root-path)\n* [Moment.js](https://github.com/moment/moment)\n* [Numeral.js](https://github.com/adamwdraper/Numeral-js)\n* [underscore.js](https://github.com/jashkenas/underscore)\n* [sprintf.js](https://github.com/alexei/sprintf.js)\n* [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js)\n\n#Change Log\n\n\n*For previous notes on changes, see CHANGELOG.md*\n\n####Omega\n\n*The file has been renamed to omega.gengo.js*\n\n**omega 0.2.21**\n\n* Updated readme\n\n* Added mustache as dependency.\n\n**omega 0.2.22**\n\n* Updated readme\n\n**omega 0.2.23**\n\n* Fixed typo for default directory\n* Small clean up with JSHint\n\n**omega 0.2.24**\n\n* Replaced dot notation parsing engine, credits to [rhalff](https://github.com/rhalff)\n* Replaced markdown engine which fixes a minor bug.\n* Removed a few try catch statements that caused issues to the core.\n* Updated readme\n\n**omega 0.2.25**\n\n* Router module can now accept urls that contain versions in the following format: `\\d{1,2}(\\.)\\d{1,2}((\\.)\\d{1,2})?$` Note that adding 'v' before the numbers does not matter just as long its in the form.\n* If you want to use multiline line in JSON. Just create the text in the following form and it will work:\n\n```js\n//ja.js\nmodule.exports = {\n    \"index\": {\n        \"something\": [\n        \"line1\",\n        \" line2\",\n        \" line3\",\n        ].join('\\n'),\n        \"so forth and so on\": \"something\"\n    }\n};\n```\n**omega 0.2.26**\n\n* Updated readme\n* Fixed a bug in locale engine where cookie could set something that shouldn't be set.\n* Fixed a bug in phrase parser where try catch wouldn't let parser return the original phrase if route results didn't exists\n\n####gengo 0.3.26 Release\n\n* gengo is now at v0.3! If you want to continue to use v0.2 just change the require path to `gengojs/legacy/v0.2/gengo.js`\n* Changed test's gengo path.\n\n**0.3.27**\n\n* Fixed bug when a browser with requesting a foreign locale would not change the site.\n\n**0.3.28**\n\n* Removed removed the global moment and numeral since it's now part of gengo.\n* Updated readme\n* Updated gengojs.com for v0.3.\n\n**0.3.29**\n\n* Fixed bug in phrase parser when router is enabled. The parser will get the translated version when its suppose to return the original phrase.\n\n**0.3.30**\n\n* Removed accept-language npm module from the dependants\n* Fixed isssue if result in phrase parser is undefined to just return the phrase.\n* All tests still pass\n* Discovered that gengo works in Sails.js smoothly in a test app (still testing). It will look like this in config/http.js:\n\n```js\n/**\n * HTTP Server Settings\n * (sails.config.http)\n *\n * Configuration for the underlying HTTP server in Sails.\n * Only applies to HTTP requests (not WebSockets)\n *\n * For more information on configuration, check out:\n * http://sailsjs.org/#/documentation/reference/sails.config/sails.config.http.html\n */\nrequire('gengojs').config({\n  default: 'en-US',\n  directory: require('app-root-path') + \"/config/locales/\",\n  debug:{\n    level: ['warn', 'debug']\n  }\n});\nmodule.exports.http = {\n\n  /****************************************************************************\n  *                                                                           *\n  * Express middleware to use for every Sails request. To add custom          *\n  * middleware to the mix, add a function to the middleware config object and *\n  * add its key to the \"order\" array. The $custom key is reserved for         *\n  * backwards-compatibility with Sails v0.9.x apps that use the               *\n  * `customMiddleware` config option.                                         *\n  *                                                                           *\n  ****************************************************************************/\n\n   middleware: {\n\n  /***************************************************************************\n  *                                                                          *\n  * The order in which middleware should be run for HTTP request. (the Sails *\n  * router is invoked by the \"router\" middleware below.)                     *\n  *                                                                          *\n  ***************************************************************************/\n    __: require('gengojs').init,\n\n    order: [\n      'startRequestTimer',\n      'cookieParser',\n      'session',\n      'myRequestLogger',\n      'bodyParser',\n      'handleBodyParserError',\n      \"__\",\n      'compress',\n      'methodOverride',\n      'poweredBy',\n      '$custom',\n      'router',\n      'www',\n      'favicon',\n      '404',\n      '500'\n    ],\n\n  /****************************************************************************\n  *                                                                           *\n  * Example custom middleware; logs each request to the console.              *\n  *                                                                           *\n  ****************************************************************************/\n\n    // myRequestLogger: function (req, res, next) {\n    //     console.log(\"Requested :: \", req.method, req.url);\n    //     return next();\n    // }\n\n\n  /***************************************************************************\n  *                                                                          *\n  * The body parser that will handle incoming multipart HTTP requests. By    *\n  * default as of v0.10, Sails uses                                          *\n  * [skipper](http://github.com/balderdashy/skipper). See                    *\n  * http://www.senchalabs.org/connect/multipart.html for other options.      *\n  *                                                                          *\n  ***************************************************************************/\n\n    // bodyParser: require('skipper')\n\n   },\n\n  /***************************************************************************\n  *                                                                          *\n  * The number of seconds to cache flat files on disk being served by        *\n  * Express static middleware (by default, these files are in `.tmp/public`) *\n  *                                                                          *\n  * The HTTP static cache is only active in a 'production' environment,      *\n  * since that's the only time Express will cache flat-files.                *\n  *                                                                          *\n  ***************************************************************************/\n\n  // cache: 31557600000\n};\n\n\n```\n**0.3.31**\n\n* Added support for traditional JSON. Change the extension in config with: `extension: 'json'`\n* Added support for arrays in JSON format if you want to use multiline. Specifically, you don't need to add `.join('\\n')` to the array.\n* Updated gengo.js site to reflect changes and also added more examples.\n* Added more tests. Total of 164 tests and passing.\n* The way how path works has changed!! The default is the same but if you specify a certain location other than the default, gengo will automatically append the root folder. Therefore, you no longer need to do something like \"../../somewhere\". It would automatically point from the root. Example: 'root + your/folder/'\n\n**0.3.32**\n\n* Updated readme\n* Changed locale function to `getLocale()` and `setLocale()`.\n  * They are now exposed to `req` and also work the same way in [mashpie](https://github.com/mashpie/i18n-node)'s i18n library.\n  * Added more tests. 164 tests and passing\n",
  "readmeFilename": "README.md",
  "gitHead": "b567fb5da7a7d95e89e5c707d4d168239b740602",
  "_id": "gengojs@0.3.32",
  "_shasum": "ef96f76491c2b32b03b33636307412b1aaf66aba",
  "_from": "gengojs@^0.3.32"
}
